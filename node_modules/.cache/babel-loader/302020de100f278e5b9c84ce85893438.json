{"ast":null,"code":"import * as React from 'react';\n\nfunction useRandomId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the random value for client-side rendering only.\n      // We can't use it server-side.\n      setDefaultId(`mui-${Math.round(Math.random() * 1e9)}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\n\n\nexport default function useReactId(idOverride) {\n  // TODO: Remove `React as any` once `useId` is part of stable types.\n  if (React.useId !== undefined) {\n    const reactId = React.useId();\n    return idOverride != null ? idOverride : reactId;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useRandomId(idOverride);\n}","map":{"version":3,"sources":["/home/henok/cv-project/client/node_modules/@mui/utils/esm/useId.js"],"names":["React","useRandomId","idOverride","defaultId","setDefaultId","useState","id","useEffect","Math","round","random","useReactId","useId","undefined","reactId"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiC;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,KAAK,CAACK,QAAN,CAAeH,UAAf,CAAlC;AACA,QAAMI,EAAE,GAAGJ,UAAU,IAAIC,SAAzB;AACAH,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpB,QAAIJ,SAAS,IAAI,IAAjB,EAAuB;AACrB;AACA;AACA;AACAC,MAAAA,YAAY,CAAE,OAAMI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAgC,EAAxC,CAAZ;AACD;AACF,GAPD,EAOG,CAACP,SAAD,CAPH;AAQA,SAAOG,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASK,UAAT,CAAoBT,UAApB,EAAgC;AAC7C;AACA,MAAIF,KAAK,CAACY,KAAN,KAAgBC,SAApB,EAA+B;AAC7B,UAAMC,OAAO,GAAGd,KAAK,CAACY,KAAN,EAAhB;AACA,WAAOV,UAAU,IAAI,IAAd,GAAqBA,UAArB,GAAkCY,OAAzC;AACD,GAL4C,CAK3C;;;AAGF,SAAOb,WAAW,CAACC,UAAD,CAAlB;AACD","sourcesContent":["import * as React from 'react';\n\nfunction useRandomId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the random value for client-side rendering only.\n      // We can't use it server-side.\n      setDefaultId(`mui-${Math.round(Math.random() * 1e9)}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\n\n\nexport default function useReactId(idOverride) {\n  // TODO: Remove `React as any` once `useId` is part of stable types.\n  if (React.useId !== undefined) {\n    const reactId = React.useId();\n    return idOverride != null ? idOverride : reactId;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useRandomId(idOverride);\n}"]},"metadata":{},"sourceType":"module"}