{"ast":null,"code":"var _jsxFileName = \"/home/henok/cv-project/client/src/components/Form/Form.js\";\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport useStyles from './styles';\nimport { createPost, updatePost } from '../../actions/posts';\n\nconst Form = _ref => {\n  let {\n    currentId,\n    setCurrentId\n  } = _ref;\n  const [postData, setPostData] = useState({\n    creator: '',\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: '',\n    email: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      creator: '',\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: '',\n      email: ''\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (TextField.name === '') {\n      return;\n    }\n\n    if (currentId === 0) {\n      dispatch(createPost(postData));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, postData));\n      clear();\n    }\n  };\n\n  const formRef = React.useRef();\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    ref: formRef,\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    required: true,\n    underline: true,\n    variant: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, currentId ? `Editing \"${post.creator}\"` : 'Add  Employee '), /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    name: \"FullName\",\n    variant: \"outlined\",\n    label: \"Full Name  \",\n    fullWidth: true,\n    value: postData.creator,\n    onChange: e => setPostData({ ...postData,\n      creator: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    name: \"Job-Title\",\n    variant: \"outlined\",\n    label: \"Job -Title\",\n    fullWidth: true,\n    value: postData.title,\n    onChange: e => setPostData({ ...postData,\n      title: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    name: \"email\",\n    type: \"email\",\n    variant: \"outlined\",\n    label: \"Email\",\n    fullWidth: true,\n    value: postData.message,\n    onChange: e => setPostData({ ...postData,\n      message: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    type: \"number\",\n    name: \"tags\",\n    variant: \"outlined\",\n    label: \"Salary \",\n    fullWidth: true,\n    value: postData.tags,\n    onChange: e => setPostData({ ...postData,\n      tags: e.target.value.split(',')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FileBase, {\n    type: \"file\",\n    multiple: false,\n    onDone: _ref2 => {\n      let {\n        base64\n      } = _ref2;\n      return setPostData({ ...postData,\n        selectedFile: base64\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 44\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => formRef.current.reportValidity(),\n    className: classes.buttonSubmit,\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    size: \"small\",\n    onClick: clear,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Clear\")));\n};\n\nexport default Form;","map":{"version":3,"sources":["/home/henok/cv-project/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","useDispatch","useSelector","FileBase","useStyles","createPost","updatePost","Form","currentId","setCurrentId","postData","setPostData","creator","title","message","tags","selectedFile","email","post","state","posts","find","_id","dispatch","classes","clear","handleSubmit","e","preventDefault","name","formRef","useRef","paper","root","form","target","value","split","fileInput","base64","current","reportValidity","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\n\nimport useStyles from './styles';\nimport { createPost, updatePost } from '../../actions/posts';\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({ creator: '', title: '', message: '', tags: '', selectedFile: '' , email:'' });\n  const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({ creator: '', title: '', message: '', tags: '', selectedFile: '' , email:''});\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (TextField.name === ''){\n      return\n    }\n\n   \n    if (currentId === 0) {\n      dispatch(createPost(postData));\n\n      clear();\n    } else {\n      dispatch(updatePost(currentId, postData));\n      clear();\n    }\n  };\n  const formRef = React.useRef();\n  return (\n    <Paper className={classes.paper}>\n      <form ref={formRef} autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n        <Typography required underline variant=\"h4\">{currentId ? `Editing \"${post.creator}\"` : 'Add  Employee '}</Typography>\n        <TextField required name=\"FullName\" variant=\"outlined\" label=\"Full Name  \" fullWidth value={postData.creator} onChange={(e) => setPostData({ ...postData, creator: e.target.value })} />\n        <TextField   name=\"Job-Title\" variant=\"outlined\" label=\"Job -Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n\n        <TextField name=\"email\" type='email' variant=\"outlined\" label=\"Email\" fullWidth  value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n        <TextField type='number'  name=\"tags\" variant=\"outlined\" label=\"Salary \" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\n        <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\n        <Button onClick={() => formRef.current.reportValidity()} className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\n        <Button  variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}